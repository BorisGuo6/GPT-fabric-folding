Printing for config 2 step 1 2024-06-21
```python
import numpy as np

def identifyCornerRegions(corners):
    # corners is a numpy array of shape (4,2)
    # each row is a corner [x,y]
    # sort the corners based on y-coordinate
    sorted_corners = corners[corners[:,1].argsort()]
    # the first two rows are the top corners
    top_corners = sorted_corners[:2]
    # the last two rows are the bottom corners
    bottom_corners = sorted_corners[2:]
    # sort the top corners based on x-coordinate
    top_corners = top_corners[top_corners[:,0].argsort()]
    # sort the bottom corners based on x-coordinate
    bottom_corners = bottom_corners[bottom_corners[:,0].argsort()]
    # return the corners and their regions
    return [(top_corners[0], 'top-left'), (top_corners[1], 'top-right'), 
            (bottom_corners[0], 'bottom-left'), (bottom_corners[1], 'bottom-right')]

def identifyPickandPlace(corners, center):
    # corners is a list of tuples
    # each tuple contains a corner and its region
    # center is a numpy array [x,y]
    # the pick points are the top corners
    pick_pos_1 = [corner for corner, region in corners if region == 'top-left'][0]
    pick_pos_2 = [corner for corner, region in corners if region == 'top-right'][0]
    # the place points are along the bottom edge, equidistant from the center to the sides
    bottom_corners = [corner for corner, region in corners if 'bottom' in region]
    bottom_left, bottom_right = bottom_corners[0], bottom_corners[1]
    place_pos_1 = [center[0] - (bottom_right[0] - center[0]), bottom_right[1]]
    place_pos_2 = [center[0] + (center[0] - bottom_left[0]), bottom_left[1]]
    return pick_pos_1, pick_pos_2, place_pos_1, place_pos_2

corners = identifyCornerRegions(cloth_corners)
pick_pos_1, pick_pos_2, place_pos_1, place_pos_2 = identifyPickandPlace(corners, cloth_center)

print('Pick Position 1:', pick_pos_1)
print('Pick Position 2:', pick_pos_2)
print('Place Position 1:', place_pos_1)
print('Place Position 2:', place_pos_2)

def findDistanceAndDirection(pick_pos, place_pos):
    # pick_pos and place_pos are numpy arrays [x,y]
    # calculate the distance between the two points
    distance = np.sqrt((place_pos[0] - pick_pos[0])**2 + (place_pos[1] - pick_pos[1])**2)
    # calculate the angle between the two points in radians
    angle = np.arctan2(place_pos[1] - pick_pos[1], place_pos[0] - pick_pos[0])
    return distance, angle

distance_1, angle_1 = findDistanceAndDirection(pick_pos_1, place_pos_1)
distance_2, angle_2 = findDistanceAndDirection(pick_pos_2, place_pos_2)

print('Distance 1 and Angle 1:', distance_1, angle_1)
print('Distance 2 and Angle 2:', distance_2, angle_2)
```
This code first identifies the corners of the cloth and their regions. Then it identifies the pick points and the place points based on the user command. It then calculates the distance and angle between each pick point
