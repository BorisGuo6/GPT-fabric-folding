Printing for config 2 step 1
```python
import numpy as np

def identifyCornerRegions(corners):
    # corners is a numpy array of shape (4,2)
    # each row is a corner [x,y]
    # the function returns a list of tuples
    # each tuple is (corner, region)
    # region is a string: 'top-left', 'top-right', 'bottom-left', 'bottom-right'
    
    # find the center of the cloth
    center = np.mean(corners, axis=0)
    
    # initialize the list of corners and regions
    corner_regions = []
    
    # for each corner
    for corner in corners:
        # determine the region of the corner
        if corner[0] < center[0] and corner[1] < center[1]:
            region = 'top-left'
        elif corner[0] > center[0] and corner[1] < center[1]:
            region = 'top-right'
        elif corner[0] < center[0] and corner[1] > center[1]:
            region = 'bottom-left'
        else:
            region = 'bottom-right'
        
        # append the corner and its region to the list
        corner_regions.append((corner, region))
    
    return corner_regions
```

```python
def identifyPickandPlace(corners, center):
    # corners is a numpy array of shape (4,2)
    # each row is a corner [x,y]
    # center is a numpy array of shape (2,)
    # the function returns four points: pick_pos_1, pick_pos_2, place_pos_1, place_pos_2
    # each point is a numpy array of shape (2,)
    
    # identify the corner regions
    corner_regions = identifyCornerRegions(corners)
    
    # initialize the pick and place points
    pick_pos_1 = None
    pick_pos_2 = None
    place_pos_1 = None
    place_pos_2 = None
    
    # for each corner and its region
    for corner, region in corner_regions:
        # if the corner is at the top
        if 'top' in region:
            # if the pick points have not been set yet
            if pick_pos_1 is None:
                pick_pos_1 = corner
            else:
                pick_pos_2 = corner
        # if the corner is at the bottom
        else:
            # if the place points have not been set yet
            if place_pos_1 is None:
                place_pos_1 = corner
            else:
                place_pos_2 = corner
    
    return pick_pos_1, pick_pos_2, place_pos_1, place_pos_2
```

```python
# call the function with the cloth corners and center
pick_pos_1, pick_pos_2, place_pos_1, place_pos_2 = identifyPickandPlace(cloth_corners, cloth_center)

# print the pick and place points
print('pick_pos_1:', pick_pos_1)
print('pick_pos_2:', pick_pos_2)
print('place_pos_1:', place_pos_1)
print('place_pos_2:', place_pos_2)
```

```python
def findDistanceAndDirection(pick_pos, place_pos):
    # pick_pos and place_pos are numpy arrays of shape (2,)
    # the function returns a tuple (distance, angle)
    # distance is a float
    # angle is a float in radians
    
    # calculate the distance between the pick and place points
    distance = np.linalg.norm(place_pos - pick_pos)
    
    # calculate the angle between the pick and place points

